// Code generated by MockGen. DO NOT EDIT.
// Source: route.go
//
// Generated by this command:
//
//	mockgen -source=route.go -destination=../mocks/route.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	entities "task/internal/entities"

	gomock "go.uber.org/mock/gomock"
)

// MockRouteRepo is a mock of RouteRepo interface.
type MockRouteRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRouteRepoMockRecorder
}

// MockRouteRepoMockRecorder is the mock recorder for MockRouteRepo.
type MockRouteRepoMockRecorder struct {
	mock *MockRouteRepo
}

// NewMockRouteRepo creates a new mock instance.
func NewMockRouteRepo(ctrl *gomock.Controller) *MockRouteRepo {
	mock := &MockRouteRepo{ctrl: ctrl}
	mock.recorder = &MockRouteRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteRepo) EXPECT() *MockRouteRepoMockRecorder {
	return m.recorder
}

// DeleteById mocks base method.
func (m *MockRouteRepo) DeleteById(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockRouteRepoMockRecorder) DeleteById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockRouteRepo)(nil).DeleteById), ctx, id)
}

// GetById mocks base method.
func (m *MockRouteRepo) GetById(ctx context.Context, id int) (entities.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(entities.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockRouteRepoMockRecorder) GetById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockRouteRepo)(nil).GetById), ctx, id)
}

// Register mocks base method.
func (m *MockRouteRepo) Register(ctx context.Context, cargo entities.Route) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, cargo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockRouteRepoMockRecorder) Register(ctx, cargo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRouteRepo)(nil).Register), ctx, cargo)
}

// SetInactual mocks base method.
func (m *MockRouteRepo) SetInactual(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInactual", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInactual indicates an expected call of SetInactual.
func (mr *MockRouteRepoMockRecorder) SetInactual(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInactual", reflect.TypeOf((*MockRouteRepo)(nil).SetInactual), ctx, id)
}
